{% extends 'base.html.twig' %}

{% block title %}
	Enregistrer un produit
{% endblock %}

{% block body %}


	<div class="container">
		<div class="card">
			<div class="card-body">
				<h1 class="card-title">Ajouter un produit</h1>

				{{ form_start(form) }}
				{{ form_widget(form) }}

				<div id="hazards"></div>
				<button type="submit" class="btn btn-primary" data-loading-text="<i class='fa fa-circle-o-notch fa-spin'></i>Loading..."  id="productFormButton">Valider</button>
				{{ form_end(form) }}
			</div>
		</div>

		{% if incompatibilities %}
			<div class="modal fade" id="compatibilityModal" tabindex="-1" aria-labelledby="compatibilityModalLabel" aria-hidden="true">
				<div class="modal-dialog modal-dialog-centered">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title" id="compatibilityModalLabel">Confirmer Emplacement</h5>
							<button type="button" class="close" data-dismiss="modal" aria-label="Close">
								<span aria-hidden="true">&times;</span>
							</button>
						</div>
						<div class="modal-body">
							<p>	Le produit que vous souhaitez créer possède des propriétés incompatibles avec celles d'autres produits se trouvant dans l'emplacement souhaité. Voulez-vous continuer ?</p>

							<table class="table">
								<thead>
								<tr>
									<th scope="col">Id</th>
									<th scope="col">NCAS</th>
									<th scope="col">Nom</th>
									<th scope="col">Concentration</th>
									<th scope="col">Masse / Volume</th>
								</tr>
								</thead>
								<tbody id="incompatibilitiesTableBody">
								{% for product in incompatibilities %}
									<tr>
										<th scope="row"> {{ product.id }} </th>
										<td> {{ product.ncas }} </td>
										<td> {{ product.name }} </td>
										<td> {{ product.concentration}} </td>
										<td> {{ product.size }} </td>
									</tr>
								{% endfor %}

								</tbody>
							</table>
						</div>
						<div class="modal-footer">
							<button type="button" class="btn btn-primary" data-dismiss="modal">Annuler</button>
							<button type="button" class="btn btn-secondary" id="compatibilityConfirmButton">Procéder à l'ajout</button>
						</div>
					</div>
				</div>
			</div>
		{% endif %}



	</div>

{% endblock %}


{% block stylesheets %}
	<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
{% endblock %}



{% block javascripts %}
	<script src="https://cdn.jsdelivr.net/npm/fuse.js@6.4.6"></script>
	{% include 'pubchemapi.html.twig' %}
	<script>
		$(() => {
			const $compatibilityModal = $('#compatibilityModal');
			const $compatibilityConfirmButton = $('#compatibilityConfirmButton');

			const $isIgnoreConflicts = $('#{{ form.is_ignore_conflicts.vars.id }}');

			const $inputNcas = $('#{{ form.ncas.vars.id }}');
			const $inputName = $('#{{ form.name.vars.id }}');


			const $ncas_field_group  = $inputNcas.parent();


			function isCasValid(cas) {
				let match_ = cas.match(/([0-9]{2,7})-([0-9]{2})-[0-9]/);
				if(!match_) {
					return false
				}
				let digits = (match_[1] + match_[2]).split('').reverse();
				let sum = 0;

				for (let i = 0; i < digits.length; i++) {
					sum += (i + 1) * parseInt(digits[i]);
				}

				return sum % 10;
			}

			function validateNcas(cas) {
				const val = isCasValid(cas);


				const class_invalid = "is-invalid";
				const class_has_validation = "has-validation";
				let error_feedback = $ncas_field_group.find('.invalid-feedback');
				if(!error_feedback.length) {
					error_feedback = $("<div class='invalid-feedback'>Numéro CAS invalide</div>");
				}
				error_feedback.hide();
				$ncas_field_group.append(error_feedback);
				$ncas_field_group.removeClass(class_has_validation);
				$inputNcas.removeClass(class_invalid);
				if(!val){
					this.cid = null;
					$ncas_field_group.addClass(class_has_validation);
					$inputNcas.addClass(class_invalid);
					error_feedback.show();
				}
				return val;
			}

			// function autocompleteName(name) {
			// 	// console.log(list)
			// 	// let p = list[$inputNcas.val()];
			// 	// console.log($inputNcas.val(), p)
			// 	// if (p) {
			// 	$inputName.val(name);
			// }



			$compatibilityConfirmButton.click(function () {
				$isIgnoreConflicts.val('true');
				$isIgnoreConflicts.form().submit();
			});


			{% if incompatibilities %}
				$compatibilityModal.modal('show');
			{% endif %}




			$.get('{{ path('products.autocomplete') }}',  (list) => {

				const values = Object.values(list);

				const options = {
					keys: [ 'ncas' ]
				};

				const fuse = new Fuse(values, options);



				$inputNcas.on('input', function () {
					if(validateNcas($(this).val()) && list[$inputNcas.val()] != null) {
						$inputName.val(list[$inputNcas.val()].name)
						$inputNcas.autocomplete('close')
					}
					else if (validateNcas($(this).val())){
						const a = new PubChem()
						a.findProductsCid($(this).val()).then(function(cid){
							if(cid != null){
								a.findProductName(cid).then(function(found_name){
									$inputName.val(found_name)
									$inputNcas.autocomplete('close')
								})
							}
						})
					}
				})

				$inputNcas.autocomplete({
					source: function( qry, callback ) {
						callback(fuse.search(qry.term).map(e=>e.item.ncas));
					},
					minLength: 1,
					select: function( event, ui ) {
						const val =ui.item.value;
						validateNcas(val)
						$inputName.val(list[val].name)
					}
				});

			});



		});
	</script>



{% endblock %}

