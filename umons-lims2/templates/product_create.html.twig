{% extends 'base.html.twig' %}

{% block title %}
	Enregistrer un produit
{% endblock %}

{% block searchbar %}{% endblock %}
{% block body %}


	<div class="container">
		<div class="card">
			<div class="card-body">
				<h1 class="card-title">Ajouter un produit</h1>

				{{ form_start(form) }}
					{{ form_widget(form) }}

					<div id="hazards"></div>
					<button type="button" class="btn btn-primary"  id="productFormButton">Valider</button>
				{{ form_end(form) }}
			</div>
		</div>


		<div class="modal fade" id="compatibilityModal" tabindex="-1" aria-labelledby="compatibilityModalLabel" aria-hidden="true">
			<div class="modal-dialog modal-dialog-centered">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title" id="compatibilityModalLabel">Confirmer Emplacement</h5>
						<button type="button" class="close" data-dismiss="modal" aria-label="Close">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body">
						<table class="table">
							<thead>
							<tr>
								<th scope="col">Id</th>
								<th scope="col">NCAS</th>
								<th scope="col">Nom</th>
							</tr>
							</thead>
							<tbody id=="incompatibilitiesTableBody">

							</tbody>
						</table>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
						<button type="button" class="btn btn-warning" id="compatibilityConfirmButton">Confirmer</button>
					</div>
				</div>
			</div>
		</div>

	</div>

{% endblock %}


{% block stylesheets %}
	<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

{% endblock %}



{% block javascripts %}
	{% include 'pubchemapi.html.twig' %}

	<script>
		$(() => {
			const $ncas_field = $( "#product_ncas" );
			const $ncas_field_group = $ncas_field.parent()
			const $product_name = $("#product_name");

			const $product_location = $("#product_location");

			const $product_hazards = $("#hazards");

			const $product_form_button = $("#productFormButton");

			const $compatibilityModal = $("#compatibilityModal");

			const $compatibilityConfirmButton = $("#compatibilityConfirmButton");
			const $productForm = $("form[name='product']");

			const $incompatibilitiesTableBody = $("#incompatibilitiesTableBody");

			const $product_isIgnoreConflict = $("#product_isIgnoreConflict");

			let name_promise;
			let hazard_promise;
			let cid_promise;


			const pState = {
				cid: null,

				set isNameLoading(val) {
					$product_name.prop( "disabled", !!val );
				},
				get isNameLoading() {
					return $product_name.prop('disabled');
				},

				set isNcasValid(val) {

					const class_invalid = "is-invalid";
					const class_has_validation = "has-validation";
					let error_feedback = $ncas_field_group.find('.invalid-feedback');
					if(!error_feedback.length) {
						error_feedback = $("<div class='invalid-feedback'>Num√©ro CAS invalide</div>");
					}
					error_feedback.hide();
					$ncas_field_group.append(error_feedback);

					$ncas_field_group.removeClass(class_has_validation);
					$ncas_field.removeClass(class_invalid);

					if(!val){
						this.cid = null;
						$ncas_field_group.addClass(class_has_validation);
						$ncas_field.addClass(class_invalid);
						error_feedback.show();
					}
				},

			}


			async function check_compatibility(location, cid) {
				let p_name = await axios.get("/json/products/compatibilities/check", {
					params: {
						location: location,
						cid: cid
					}
				});
				return  p_name.data;
			}

			async function get_name(pubchem, prodCid) {
				let p_name = await axios.get("/json/products/name", {
					params: {
						ncas: prodCid
					}
				});
				return  p_name.data || await pubchem.findProductName(prodCid);
			}

			function autofill_name(pubchem, cid) {

				pState.isNameLoading = true;

				name_promise = get_name(pubchem, cid);
				const localPromise = name_promise;
				name_promise.then(result => {
					if(name_promise === localPromise){
						pState.isNameLoading = false;
						if(result) {
							$product_name.val(result);
						}
					}
				});
			}

			function clear_hazards() {
				$product_hazards.empty();
			}

			async  function  get_hazards(pubchem, prodCid) {
				return await pubchem.findProductHazards(prodCid);
			}

			// function autofill_hazards(pubchem, cid) {
			// 	hazard_promise = get_hazards(pubchem, cid);
			// 	const localPromise = hazard_promise;
			// 	hazard_promise.then(hzds => {
			//
			// 		if(hazard_promise === localPromise){
			// 			if(hzds) {
			// 				hzds.forEach(h => {
			// 					$product_hazards.append(`<input type="hidden" name="hazards[${h.code}]" value="${h.text}" />`)
			// 				});
			// 			}
			// 		}
			// 	});
			// }


			function  update(pubchem, ncas) {
				clear_hazards();

				if(ncas.length >= 3 && pubchem.isCasValid(ncas)){

					cid_promise = pubchem.findProductsCid(ncas);
					const localPromise = cid_promise;
					cid_promise
							.then(cid => {
								if(cid_promise === localPromise){
									if (cid) {
										pState.cid = null;
										pState.isNcasValid = true;
										autofill_name(pubchem, cid);
										// autofill_hazards(pubchem, cid);
									} else {
										pState.isNcasValid = false;
									}
								}
							})
							.catch((err)=>{
								pState.isNcasValid = false;
							})
				} else {
					pState.isNcasValid = false;
				}
			}

			$compatibilityConfirmButton.click(function () {
				$product_isIgnoreConflict.val(true);
				$productForm.submit();
			});

			$product_form_button.click(function( event ) {
				$product_form_button.button('loading');

				if(pState.cid){
					check_compatibility($product_location.val(), pState.cid)
							.then(incompatibilities => {
								if (incompatibilities) {
									$incompatibilitiesTableBody.empty();
									for (let incompatibility of incompatibilities) {
										$incompatibilitiesTableBody.append(
												'<th scope="row">'+ incompatibility.id +'</th>'+
												"<td>"+ incompatibility.ncas +"</td>"+
												"<td>"+ incompatibility.name +"</td>"
										);
									}
									$compatibilityModal.modal('show');
								} else {
									$productForm.submit();
								}
							});
				}



				event.preventDefault();


			});

			const pubchem = new PubChem();

			$ncas_field.on("input", function() {
				update(pubchem,  $(this).val())
			});

			$ncas_field.autocomplete({
				source: function( qry, callback ) {
					pubchem.autocompleteCAS(qry.term).then(callback)
				},
				minLength: 3,
				select: function( event, ui ) {
					update(pubchem, ui.item.value)
				}
			});


		});



	</script>



{% endblock %}

